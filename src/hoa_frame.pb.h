// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hoa_frame.proto

#ifndef PROTOBUF_hoa_5fframe_2eproto__INCLUDED
#define PROTOBUF_hoa_5fframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hoa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hoa_5fframe_2eproto();
void protobuf_AssignDesc_hoa_5fframe_2eproto();
void protobuf_ShutdownFile_hoa_5fframe_2eproto();

class HOAFrame;

// ===================================================================

class HOAFrame : public ::google::protobuf::Message {
 public:
  HOAFrame();
  virtual ~HOAFrame();

  HOAFrame(const HOAFrame& from);

  inline HOAFrame& operator=(const HOAFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HOAFrame& default_instance();

  void Swap(HOAFrame* other);

  // implements Message ----------------------------------------------

  HOAFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HOAFrame& from);
  void MergeFrom(const HOAFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required uint32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required bool is_heart = 6;
  inline bool has_is_heart() const;
  inline void clear_is_heart();
  static const int kIsHeartFieldNumber = 6;
  inline bool is_heart() const;
  inline void set_is_heart(bool value);

  // optional bool debug_mode = 7;
  inline bool has_debug_mode() const;
  inline void clear_debug_mode();
  static const int kDebugModeFieldNumber = 7;
  inline bool debug_mode() const;
  inline void set_debug_mode(bool value);

  // @@protoc_insertion_point(class_scope:hoa.HOAFrame)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_heart();
  inline void clear_has_is_heart();
  inline void set_has_debug_mode();
  inline void clear_has_debug_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  ::std::string* data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 type_;
  bool is_heart_;
  bool debug_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_hoa_5fframe_2eproto();
  friend void protobuf_AssignDesc_hoa_5fframe_2eproto();
  friend void protobuf_ShutdownFile_hoa_5fframe_2eproto();

  void InitAsDefaultInstance();
  static HOAFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// HOAFrame

// required string uuid = 1;
inline bool HOAFrame::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HOAFrame::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HOAFrame::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HOAFrame::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& HOAFrame::uuid() const {
  return *uuid_;
}
inline void HOAFrame::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void HOAFrame::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void HOAFrame::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HOAFrame::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* HOAFrame::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HOAFrame::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes data = 2;
inline bool HOAFrame::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HOAFrame::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HOAFrame::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HOAFrame::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& HOAFrame::data() const {
  return *data_;
}
inline void HOAFrame::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void HOAFrame::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void HOAFrame::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HOAFrame::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* HOAFrame::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HOAFrame::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 width = 3;
inline bool HOAFrame::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HOAFrame::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HOAFrame::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HOAFrame::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 HOAFrame::width() const {
  return width_;
}
inline void HOAFrame::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// required uint32 height = 4;
inline bool HOAFrame::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HOAFrame::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HOAFrame::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HOAFrame::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 HOAFrame::height() const {
  return height_;
}
inline void HOAFrame::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// required uint32 type = 5;
inline bool HOAFrame::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HOAFrame::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HOAFrame::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HOAFrame::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 HOAFrame::type() const {
  return type_;
}
inline void HOAFrame::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required bool is_heart = 6;
inline bool HOAFrame::has_is_heart() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HOAFrame::set_has_is_heart() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HOAFrame::clear_has_is_heart() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HOAFrame::clear_is_heart() {
  is_heart_ = false;
  clear_has_is_heart();
}
inline bool HOAFrame::is_heart() const {
  return is_heart_;
}
inline void HOAFrame::set_is_heart(bool value) {
  set_has_is_heart();
  is_heart_ = value;
}

// optional bool debug_mode = 7;
inline bool HOAFrame::has_debug_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HOAFrame::set_has_debug_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HOAFrame::clear_has_debug_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HOAFrame::clear_debug_mode() {
  debug_mode_ = false;
  clear_has_debug_mode();
}
inline bool HOAFrame::debug_mode() const {
  return debug_mode_;
}
inline void HOAFrame::set_debug_mode(bool value) {
  set_has_debug_mode();
  debug_mode_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hoa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hoa_5fframe_2eproto__INCLUDED
